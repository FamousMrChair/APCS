/*
Kevin Xiao + Mr. Swag
APCS
HW36 -- All Quacked Up
2021-11-18
time spent: 0.5 hrs
*/
Compile-time errors: Syntax is wrong; i.e. omitting semicolon at the end of a statement
Run-time errors: Something goes wrong while program is running; i.e. an infinite loop from recursion
Logic errors: cause the program to do the wrong thing.

FIX ERRORS ONE AT A TIME!

Compile-time errors:
Check for common syntax errors:
Parentheses, uppercase/lowercase, semicolons, quotation, declare type, method invocation, invoking instance method, and invoking non-static within static.
Debugging by disection:
Take code apart piece by piece to figure out where the bug is; delete half of the code at a time.
This is an ugly process, but is fast and reliable.
(This is my favorite process, because I can tear about my code)

Don't let the compiler lead you by the nose.

Run-time errors:
If a program stops, we call it "hanging." This results from an infinite loop or recursive method.
Infinite recursion causes a StackOverflowError.
Add print statements to the beginning and ending of the methods to check where the bug is.

NullPointerException: trying to access a variable or invoke object that is null.
ArrayIndexOutOfBoundsException: index you are trying to access is out of the range of the array.
StackOVerflowError: infinite recursion!
FileNotFoundException: File you are looking for does not exist.
ArithmeticException: arithmetic operation went wrong.

Simplify print statements. Remove unnecessary experimental parts and aim for conciseness.
Scale down problem; i.e. when sorting through arrays sort through smaller arrayas.

Logic Errors:
Make concise and clear flowcharts to fix logic errors! Break the program into components and test them independently.

Integer division always round to zero.
Floating-point numbers are only approximate. 
== checks if objects are identitcal, .equals compares equivalence.
Inheritance can lead to subtle logic errors.

Rewrite code into simpler versions of itself (although more elaborate) so it is easier to find bugs.
Use temporary variables!

When stuck: take a break! (aka touch grass nerd)
If REALLY stuck: explain to rubber duck! (rubber duckie debugging really works!)
If REALLY REALLY REALLY REALLY stuck: ask someone else to look over your code and help you find bugs.
